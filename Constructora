/*
 * Creado por SharpDevelop.
 * Usuario: iori_
 * Fecha: 2/5/2023
 * Hora: 19:59
 * 
 * Para cambiar esta plantilla use Herramientas | Opciones | Codificación | Editar Encabezados Estándar
 */
using System;
using System.Collections;
using System.Collections.Generic;
namespace TP_Final
{
	
	public class Constructora
	{
		//Atributos
        private string nombre;
        private Obra obra;
        private Obra progreso;
        private Grupo_Obreros grupo;
		private List<Obra> obras;
        private List<Obra> obrasFinalizadas;
        private List<Grupo_Obreros> lista_grupos;
		private Grupo_Obreros grupos;        
		
		//Constructor
        public Constructora(string nombre,Grupo_Obreros grupo){
			this.nombre=nombre;
			this.grupo=grupo;
            lista_grupos = new List<Grupo_Obreros>();
			obras=new List<Obra>();
            obrasFinalizadas= new List<Obra>();
            // Crea los 8 grupos iniciales
        for (int i = 1; i <= 8; i++)
        {
            lista_grupos.Add(new Grupo_Obreros(i));
        }
            
		}
		public Constructora(){
			
		}
		public Constructora(Obra obra){
			this.obra=obra;
			
		}
		public Constructora(Grupo_Obreros grupos){
			this.grupos=grupos;
		}
        //Metodos
        
        public Obra Obrass{
        	set{obra=value;}get{return obra;}
        }
        public List<Grupo_Obreros> Lista_grupos{
            get{return  lista_grupos;}
        }
        public List<Obra> Obras{
            get{return obras;}
        }
        public List<Obra> ObrasFinalizadas{
            get{return obrasFinalizadas;}
        }
        public Grupo_Obreros Grupo{
        	set{grupos=value;}get{return grupos;}
        }
        public Obra Progress{
        	set{progreso=value;}get{return progreso;}
        }
        
		public void Agregar_Obra(string nombreDeDuenio,int dniDeDuenio,string Tipodeobra,string TEEjecucion,double costo,int grupoID,int progreso, int codigoINT){
			Obra NuevaObra= new Obra(nombreDeDuenio,dniDeDuenio,Tipodeobra,TEEjecucion,costo, grupoID, progreso,  codigoINT);
			obras.Add(NuevaObra);
			Console.WriteLine("agregado exitosamente, perfectirigillo");
		}
        public void Agregar_Obra(Obra obra){
        	obras.Add(obra);
        	
        }
        public void Agregar_Obrero(string nombre, string apellido,string cargo, int dni, int nroLegajo,int id)
    {
        if (grupo != null)
    {
        grupo.AgregarObrero(nombre, apellido, cargo, dni, nroLegajo,id);
        // Agregar al obrero al grupo correspondiente
        grupo = lista_grupos.Find(g => g.ID == obra.GrupID);
        grupo.Lista_obreros.Add(new Obrero(nombre, apellido, cargo, dni, nroLegajo, id));

    }
    else
    {
        Console.WriteLine("Error: No se puede agregar el obrero. No se ha asignado un grupo.");
    }
        	
        
    }
        
 
        public void Mostrar_Obras(){
        	
				foreach(Obra obra in obras){
        		Console.WriteLine(obra.ToString());
			}
        	
  
        }
        public void Mostrar_ObrasF(){
			foreach(Obra obraF in obrasFinalizadas){
				Console.WriteLine(obraF);
			}
        }
        public void estado_obra(){
        	
        	for (int i = 0; i < obras.Count; i++){

    Obra obra = obras[i];

    if (obra.Progreso == 100){
    
        obrasFinalizadas.Add(obra);
        obras.RemoveAt(i);
        i--; 
             }
        } 	
      }
        public void Agregar_Grupo(Grupo_Obreros grupo){
        	lista_grupos.Add(grupo);
        }
        
    
	
	   
         public void eliminar_obrero(int dni)
{
    if (grupo != null)
    {
        Obrero Despedido = grupo.Lista_obreros.Find(o => o.DNI == dni);
        if (Despedido != null)
        {
            grupo.RemoverObrero(Despedido);
            Console.WriteLine("Obrero eliminado exitosamente.");
        }
        else
        {
            Console.WriteLine("No se encontró un obrero con el DNI especificado en el grupo.");
        }
    }
    else
    {
        Console.WriteLine("Error: No se puede eliminar el obrero. No se ha asignado un grupo.");
    }
}
		public void Mostrar_Obrero(){
			Console.WriteLine("hay {0} obreros en la obra.",grupo.Lista_obreros.Count);
			foreach (Obrero obrero in grupo.Lista_obreros){
				Console.WriteLine(obrero);
			}
        }
         public void Mostrar_Grupo(){
			Console.WriteLine("hay {0} grupos en la obra.",lista_grupos.Count);
			foreach (Grupo_Obreros grupo in lista_grupos){
				Console.WriteLine(grupo);
			}
        }
    }
}